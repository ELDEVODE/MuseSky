type BTCPrice = record { usd : float64; timestamp : nat64 };
type Collection = record {
  id : nat;
  creator_name : text;
  owner : principal;
  name : text;
  tags : vec text;
  description : text;
  social_media_links : opt SocialMediaLinks;
  supply : nat;
  image : blob;
  date_of_mint : nat;
};
type Condition = variant { Sunny; Cloudy; Windy; Snowing; Raining };
type Currency = variant { BTC; ETH; ICP; SOL };
type DashboardData = record {
  active_auctions : vec NFT;
  total_collections : nat;
  total_nfts : nat;
  nfts_for_sale : vec NFT;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type NFT = record {
  id : nat;
  creator : principal;
  weather_condition : text;
  owner : principal;
  name : text;
  auction_extension_period : opt nat64;
  collection_id : nat;
  initial_price : NFTPrice;
  highest_bidder : opt principal;
  for_sale : bool;
  all_images : vec blob;
  created_at : nat;
  sale_price : opt NFTPrice;
  auction_end_time : opt nat64;
  rarity : Rarity;
  image : blob;
  highest_bid : opt NFTPrice;
  price : NFTPrice;
  last_price_update : nat64;
  location : text;
};
type NFTPrice = record { currency : Currency; amount : nat };
type Rarity = variant { Epic; Rare; Uncommon; Legendary; Common };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type SocialMediaLinks = record {
  x : opt text;
  instagram : opt text;
  website : opt text;
  discord : opt text;
  telegram : opt text;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type UserProfile = record {
  "principal" : principal;
  is_new_user : bool;
  nfts : vec NFT;
  collections : vec Collection;
  wallet : Wallet;
};
type Wallet = record {
  owner : principal;
  balances : vec record { Currency; nat };
};
type WeatherData = record {
  temperature : float64;
  timestamp : nat;
  location : text;
  condition : Condition;
};
service : () -> {
  buy_nft : (nat, Currency) -> (Result);
  create_collection : (
      text,
      blob,
      text,
      opt text,
      opt text,
      opt text,
      opt text,
      opt text,
      text,
      vec text,
    ) -> (nat);
  end_auction : (nat) -> (Result);
  get_active_auctions : () -> (vec NFT) query;
  get_all_collections : () -> (vec Collection) query;
  get_btc_price : () -> (BTCPrice);
  get_btc_price_f : () -> (BTCPrice) query;
  get_collection_details : (nat) -> (opt Collection) query;
  get_collections_by_owner : (principal) -> (vec Collection) query;
  get_dashboard_data : () -> (DashboardData) query;
  get_nft : (nat) -> (opt NFT) query;
  get_nfts_by_owner : (principal) -> (vec NFT) query;
  get_nfts_for_sale : () -> (vec NFT) query;
  get_nfts_in_collection : (nat) -> (vec NFT) query;
  get_raw_data : (text) -> (Result_1) query;
  get_raw_weather_data : (text) -> (Result_1);
  get_user_profile : (principal) -> (UserProfile) query;
  get_wallet_balance : (principal, Currency) -> (nat) query;
  get_weather : (text) -> (WeatherData);
  get_weather_data : (text) -> (WeatherData) query;
  list_nft_for_sale : (nat, nat) -> (Result);
  mint_nft : (nat, text, nat, Currency, blob, blob, blob, blob, text) -> (
      Result_2,
    );
  place_bid : (nat, nat, Currency) -> (Result);
  start_auction : (nat, nat, nat64) -> (Result);
  transfer : (principal, nat, Currency) -> (Result);
  transform : (TransformArgs) -> (HttpResponse) query;
  update_balance : (principal, nat, Currency) -> (Result_2);
}
